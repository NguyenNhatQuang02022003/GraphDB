<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Qu·∫£n l√Ω S√°ch - GraphQL</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      background-color: #f5f7fa;
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }
    
    header {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 30px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    h1 i {
      font-size: 2rem;
    }
    
    .subtitle {
      font-size: 1.1rem;
      opacity: 0.9;
      margin-left: 45px;
    }
    
    .container {
      display: grid;
      grid-template-columns: 1fr 350px;
      gap: 30px;
    }
    
    @media (max-width: 768px) {
      .container {
        grid-template-columns: 1fr;
      }
    }
    
    .card {
      background: white;
      border-radius: 10px;
      padding: 25px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
      transition: transform 0.3s ease;
    }
    
    .card:hover {
      transform: translateY(-5px);
    }
    
    .card h2 {
      color: #2c3e50;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 2px solid #f0f0f0;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    #bookList {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .book-item {
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 8px;
      padding: 15px;
      transition: all 0.3s ease;
    }
    
    .book-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      border-color: #3498db;
    }
    
    .book-item h3 {
      color: #2c3e50;
      margin-bottom: 8px;
      font-size: 1.2rem;
    }
    
    .book-id {
      display: inline-block;
      background: #e1f0fa;
      color: #2980b9;
      font-size: 0.8rem;
      padding: 3px 8px;
      border-radius: 20px;
      margin-bottom: 10px;
    }
    
    .book-author {
      color: #7f8c8d;
      font-style: italic;
      margin-bottom: 15px;
    }
    
    .actions {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }
    
    button {
      padding: 8px 15px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    }
    
    button:active {
      transform: translateY(0);
    }
    
    .edit-btn {
      background: #2ecc71;
      color: white;
    }
    
    .delete-btn {
      background: #e74c3c;
      color: white;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #2c3e50;
    }
    
    input {
      width: 100%;
      padding: 12px 15px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 1rem;
      transition: border-color 0.3s;
    }
    
    input:focus {
      border-color: #3498db;
      outline: none;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }
    
    .form-actions {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }
    
    .save-btn {
      background: #3498db;
      color: white;
      flex: 1;
      padding: 12px;
    }
    
    .reset-btn {
      background: #95a5a6;
      color: white;
      padding: 12px;
    }
    
    .status {
      margin-top: 20px;
      padding: 15px;
      border-radius: 5px;
      text-align: center;
      font-weight: 500;
    }
    
    .success {
      background: #d4edda;
      color: #155724;
    }
    
    .error {
      background: #f8d7da;
      color: #721c24;
    }
    
    footer {
      text-align: center;
      margin-top: 40px;
      padding: 20px;
      color: #7f8c8d;
      font-size: 0.9rem;
    }
    
    .empty-state {
      text-align: center;
      padding: 40px 20px;
      color: #7f8c8d;
    }
    
    .empty-state i {
      font-size: 3rem;
      margin-bottom: 15px;
      opacity: 0.3;
    }
  </style>
</head>
<body>
  <header>
    <h1>
      <span>üìö</span> Qu·∫£n L√Ω S√°ch v·ªõi GraphQL
    </h1>
    <p class="subtitle">·ª®ng d·ª•ng qu·∫£n l√Ω s√°ch s·ª≠ d·ª•ng GraphQL v√† Node.js</p>
  </header>
  
  <div class="container">
    <main>
      <div class="card">
        <h2><span>üìñ</span> Danh s√°ch S√°ch</h2>
        <div id="bookList" class="book-list">
          <!-- Danh s√°ch s√°ch s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y -->
          <div class="empty-state">
            <div>üìö</div>
            <p>ƒêang t·∫£i danh s√°ch s√°ch...</p>
          </div>
        </div>
      </div>
    </main>
    
    <aside>
      <div class="card">
        <h2><span>‚úèÔ∏è</span> Th√™m / C·∫≠p nh·∫≠t S√°ch</h2>
        
        <input type="hidden" id="bookId">
        
        <div class="form-group">
          <label for="title">Ti√™u ƒë·ªÅ s√°ch</label>
          <input type="text" id="title" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ s√°ch">
        </div>
        
        <div class="form-group">
          <label for="author">T√°c gi·∫£</label>
          <input type="text" id="author" placeholder="Nh·∫≠p t√™n t√°c gi·∫£">
        </div>
        
        <div class="form-actions">
          <button class="save-btn" onclick="submitBook()">
            <span>üíæ</span> L∆∞u S√°ch
          </button>
          <button class="reset-btn" onclick="resetForm()">
            <span>üîÑ</span> Nh·∫≠p l·∫°i
          </button>
        </div>
        
        <div id="statusMessage" class="status"></div>
      </div>
    </aside>
  </div>
  
  <footer>
    <p>¬© 2023 Qu·∫£n L√Ω S√°ch - GraphQL | S·ª≠ d·ª•ng Node.js, Express v√† GraphQL</p>
  </footer>
  
  <script>
    const API_URL = 'http://localhost:4000/graphql';
    
    // Hi·ªÉn th·ªã danh s√°ch s√°ch
    async function fetchBooks() {
      const query = `{
        books {
          id
          title
          author
        }
      }`;
      
      try {
        const bookList = document.getElementById('bookList');
        bookList.innerHTML = '<div class="empty-state"><div>‚è≥</div><p>ƒêang t·∫£i d·ªØ li·ªáu...</p></div>';
        
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query })
        });
        
        const result = await response.json();
        
        if (result.errors) {
          throw new Error(result.errors[0].message);
        }
        
        renderBooks(result.data.books);
      } catch (error) {
        showStatus(`L·ªói khi t·∫£i s√°ch: ${error.message}`, 'error');
        console.error('L·ªói khi t·∫£i s√°ch:', error);
      }
    }
    
    function renderBooks(books) {
      const bookList = document.getElementById('bookList');
      
      if (!books || books.length === 0) {
        bookList.innerHTML = `
          <div class="empty-state">
            <div>üì≠</div>
            <p>Kh√¥ng c√≥ s√°ch n√†o trong th∆∞ vi·ªán</p>
            <p>H√£y th√™m s√°ch m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
          </div>
        `;
        return;
      }
      
      bookList.innerHTML = books.map(book => `
        <div class="book-item">
          <div class="book-id">ID: ${book.id}</div>
          <h3>${book.title}</h3>
          <p class="book-author">T√°c gi·∫£: ${book.author}</p>
          <div class="actions">
            <button class="edit-btn" onclick="editBook(${book.id})">
              <span>‚úèÔ∏è</span> S·ª≠a
            </button>
            <button class="delete-btn" onclick="deleteBook(${book.id})">
              <span>üóëÔ∏è</span> X√≥a
            </button>
          </div>
        </div>
      `).join('');
    }
    
    // Th√™m/C·∫≠p nh·∫≠t s√°ch
    async function submitBook() {
      const id = document.getElementById('bookId').value;
      const title = document.getElementById('title').value.trim();
      const author = document.getElementById('author').value.trim();
      
      if (!title || !author) {
        showStatus('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s√°ch', 'error');
        return;
      }
      
      try {
        let mutation = '';
        let successMessage = '';
        
        if (id) {
          // C·∫≠p nh·∫≠t s√°ch
          mutation = `
            mutation {
              updateBook(id: ${id}, input: {title: "${escapeGraphQLString(title)}", author: "${escapeGraphQLString(author)}"}) {
                id
                title
                author
              }
            }
          `;
          successMessage = 'C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!';
        } else {
          // Th√™m s√°ch m·ªõi
          mutation = `
            mutation {
              addBook(input: {title: "${escapeGraphQLString(title)}", author: "${escapeGraphQLString(author)}"}) {
                id
                title
                author
              }
            }
          `;
          successMessage = 'Th√™m s√°ch th√†nh c√¥ng!';
        }
        
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: mutation })
        });
        
        const result = await response.json();
        
        if (result.errors) {
          throw new Error(result.errors[0].message);
        }
        
        showStatus(successMessage, 'success');
        resetForm();
        fetchBooks();
      } catch (error) {
        showStatus(`L·ªói: ${error.message}`, 'error');
        console.error('L·ªói khi l∆∞u s√°ch:', error);
      }
    }
    
    // X√≥a s√°ch
    async function deleteBook(id) {
      if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s√°ch n√†y?')) {
        return;
      }
      
      try {
        const mutation = `
          mutation {
            deleteBook(id: ${id})
          }
        `;
        
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: mutation })
        });
        
        const result = await response.json();
        
        if (result.errors) {
          throw new Error(result.errors[0].message);
        }
        
        showStatus(result.data.deleteBook, 'success');
        fetchBooks();
      } catch (error) {
        showStatus(`L·ªói: ${error.message}`, 'error');
        console.error('L·ªói khi x√≥a s√°ch:', error);
      }
    }
    
    // Ch·ªânh s·ª≠a s√°ch
    async function editBook(id) {
      try {
        const query = `
          query {
            getBookById(id: ${id}) {
              id
              title
              author
            }
          }
        `;
        
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query })
        });
        
        const result = await response.json();
        
        if (result.errors) {
          throw new Error(result.errors[0].message);
        }
        
        const book = result.data.getBookById;
        
        document.getElementById('bookId').value = book.id;
        document.getElementById('title').value = book.title;
        document.getElementById('author').value = book.author;
        
        // Cu·ªôn ƒë·∫øn form
        document.querySelector('.card h2').scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start'
        });
        
        showStatus('ƒê√£ t·∫£i th√¥ng tin s√°ch ƒë·ªÉ ch·ªânh s·ª≠a', 'success');
      } catch (error) {
        showStatus(`L·ªói khi t·∫£i th√¥ng tin s√°ch: ${error.message}`, 'error');
        console.error('L·ªói khi t·∫£i s√°ch ƒë·ªÉ ch·ªânh s·ª≠a:', error);
      }
    }
    
    // Reset form
    function resetForm() {
      document.getElementById('bookId').value = '';
      document.getElementById('title').value = '';
      document.getElementById('author').value = '';
      document.getElementById('statusMessage').textContent = '';
      document.getElementById('statusMessage').className = 'status';
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i
    function showStatus(message, type) {
      const statusElement = document.getElementById('statusMessage');
      statusElement.textContent = message;
      statusElement.className = `status ${type}`;
      
      // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 5 gi√¢y
      setTimeout(() => {
        statusElement.textContent = '';
        statusElement.className = 'status';
      }, 5000);
    }
    
    // H√†m h·ªó tr·ª£ ƒë·ªÉ escape chu·ªói GraphQL
    function escapeGraphQLString(str) {
      return str.replace(/"/g, '\\"')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\t/g, '\\t');
    }
    
    // Kh·ªüi t·∫°o
    document.addEventListener('DOMContentLoaded', () => {
      fetchBooks();
      
      // Th√™m s·ª± ki·ªán Enter ƒë·ªÉ submit form
      document.getElementById('title').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') submitBook();
      });
      
      document.getElementById('author').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') submitBook();
      });
    });
  </script>
</body>
</html>